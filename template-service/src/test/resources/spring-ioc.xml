<?xml version="1.0" encoding="UTF-8"?>
<!--
见源码：org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.populateDefaults
http://www.springframework.org/schema/beans是Spring默认的命名空间
beans标签包含有以下属性及其相关作用
"default-lazy-init"：指定<beans>元素下配置的所有bean默认的延迟初始化行为
"default-merge"：指定<beans>元素下配置的所有bean默认的merge行为
"default-autowire"：指定<beans>元素下配置的所有bean默认的自动装配行为
"default-autowire-candidates"：指定<beans>元素下配置的所有bean默认是否不作为自动装配
"default-init-method"：指定<beans>元素下配置的所有bean默认的初始化方法
"default-destroy-method"：指定<beans>元素下配置的所有bean默认的回收方法
"profile":指定该Spring配置文件适用的profile环境id
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd" default-init-method="">

    <!--
    每一个Bean读取是都创建了一个GenericBeanDefinition，其实现了BeanDefinition，另外还有RootBeanDefinition、ChildBeanDefinition都是bean配置的封装，都是通过BeanDefinitionParserDelegate委托类来解析
    beans标签下面可以配置以下四个标签
        <bean/>：定义业务bean
        <alias name="" alias=""/>：指定bean其他别名
        <beans/> ：指定各profile下的bean标签
        <import resource=""/>：指定引入外部Spring xml配置
    -->
    <!--
        1、定义bean，通过属性setter方法注入值
        2、bean可以不指定id、name属性，如果没有指定id、取name属性配置的第一个名称作为id，再name属性没有配置，则会自动生成classname#序号（例如：0，1）
        3、Spring 5.x xml配置中已省略singleton这个bean属性，但是程序中兼容此配置，优先级：single>scope
        4、autowire-candidate：false表示该bean不参与自动注入功能
        5、primary:该属性指定同一类型多个bean时，指定匹配优先级
        6、autowire属性可配置值有no、byType、byName、constructor、autodetect，默认为no
        7、bean配置的init-method属性会覆盖beans标签中default-init-method属性，类似配置如：destroy-method
        8、bean子属性property中不能同时存在ref和value两个属性
        9、一个Bean定义中只允许指定类型不同的<qualifier>，如果有多个相同type后面指定的将覆盖前面的，类似@Qualifier注解指定注入的特定bean实例。
        10、定义abstract的bean不能直接初始化
        11、depends-on配置初始化时需要依赖的bean，这些bean优先初始化
    -->
    <bean id="oneIoc" name="oneIoc01,oneIoc02" class="ioc.SpringIoc" autowire-candidate="false">
        <property name="name" value="oneIoc"/>
    </bean>

    <!--没有定义id属性，bean的id取name中的第一个，然后通过构造参数注入值-->
    <bean class="ioc.SpringIoc" name="twoIoc,twoIoc01" primary="true">
        <description>多个别名配置</description>
        <!--meta子标签用于配置中而外添加属性，通过getAttribute方法获取-->
        <meta key="deptName" value="客服"/>
        <constructor-arg name="name" value="twoIoc"/>
    </bean>

    <!--这里bean标签标红，不代表配置出错-->
    <bean id="context" class="ioc.SpringIocContext" autowire="byType" depends-on="depond"/>

    <!--定义依赖bean-->
    <bean id="depond" class="ioc.DependsOn"/>

    <bean id="springIocFactory" class="ioc.SpringIocFactory"/>

    <!--通过工厂方法创建bean实例-->
    <bean id="threeIoc" class="ioc.SpringIoc" factory-bean="springIocFactory" factory-method="instance"/>

    <!--指定的lookup-method标签中指定的name方法名，返回值必须为bean匹配的类型，通过这方式可以注入非单例bean-->
    <bean id="iocPrototype" class="ioc.SpringIoc" scope="prototype"/>

    <bean id="lookup" class="ioc.LookupOverride">
        <lookup-method bean="iocPrototype" name="createSpringIoc"/>
    </bean>

    <!--使用replaced-method子标签用法-->
    <bean id="replaceBean" class="ioc.ReplacedMethod"/>

    <bean id="fourIoc" class="ioc.SpringIocContext">
        <replaced-method name="getSpringIoc" replacer="replaceBean"/>
    </bean>

    <bean class="ioc.IocBeanDefinitionRegistryPostProcessor"/>

</beans>